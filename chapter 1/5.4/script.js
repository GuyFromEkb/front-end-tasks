"use strict";

let fruits = ["Яблоки", "Груша", "Апельсин"];

// добавляем новое значение в "копию"
let shoppingCart = fruits;
shoppingCart.push("Банан");

// что в fruits?
alert(fruits.length); // => 4

/* авайте произведём 5 операций с массивом.

Создайте массив styles с элементами «Джаз» и «Блюз».
Добавьте «Рок-н-ролл» в конец.
Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
Удалите первый элемент массива и покажите его.
Вставьте Рэп и Регги в начало массива.
Массив по ходу выполнения операций:

Джаз, Блюз
Джаз, Блюз, Рок-н-ролл
Джаз, Классика, Рок-н-ролл
Классика, Рок-н-ролл
Рэп, Регги, Классика, Рок-н-ролл */

const style = ["Джаз", "Блюз"];
style.push("Рок-н-Ролл");
style[Math.floor((style.length - 1) / 2)] = "Классика";
console.log(style.shift());
style.unshift("Рэп", "Регги");


/* Каков результат? Почему?

let arr = ["a", "b"];

arr.push(function() {
  alert( this );
});

arr[2](); // ? */

// => вернет изначальный массив, добавив туда функцию[a, b, function()]


// Напишите функцию sumInput(), которая:

// Просит пользователя ввести значения, используя prompt и сохраняет их в массив.
// Заканчивает запрашивать значения, когда пользователь введёт не числовое значение, пустую строку или нажмёт «Отмена».
// Подсчитывает и возвращает сумму элементов массива.
// P.S. Ноль 0 – считается числом, не останавливайте ввод значений при вводе «0».


function sumInput() {

    let numb = [];

    for (;;) {

        const value = prompt("Введите число", 0);

        if (value === "" || value === null || !isFinite(value))
            break;

        numb.push(+value);
    }

    let sum = 0;
    for (let number of numb) {
        sum += number;
    }
    return sum;
}

alert(sumInput());


/* На входе массив чисел, например: arr = [1, -2, 3, 4, -9, 6].

Задача: найти непрерывный подмассив в arr, сумма элементов в котором максимальна.

Функция getMaxSubSum(arr) должна возвращать эту сумму.

Например:

getMaxSubSum([-1, 2, 3, -9]) == 5 (сумма выделенных элементов)
getMaxSubSum([2, -1, 2, 3, -9]) == 6
getMaxSubSum([-1, 2, 3, -9, 11]) == 11
getMaxSubSum([-2, -1, 1, 2]) == 3
getMaxSubSum([100, -9, 2, -3, 5]) == 100
getMaxSubSum([1, 2, 3]) == 6 (берём все)
Если все элементы отрицательные – ничего не берём(подмассив пустой) и сумма равна «0»:

getMaxSubSum([-1, -2, -3]) = 0
Попробуйте придумать быстрое решение: O(n2), а лучше за О(n) операций. */


function getMaxSubSum(arr) {
    let sum = 0;

    for (let i = 0; i < arr.length; i++) {
        let innerSum = 0;
        for (let j = i; j < arr.length; j++) {
            innerSum += arr[j];
            sum = Math.max(sum, innerSum);
        }
    }

    return sum;
}

// долго сидел,  дошёл только до медленного решения, через for of сам не 
//смог додуматься , подсмотрел в ответах....

//